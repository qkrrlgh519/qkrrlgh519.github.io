---
layout: post
title: "Graph Algorithm(Overview)"
date: 2025-10-20 12:00:00 +0900
categories: Algorithm(Overview)
---

## Graph Algorithm - 그래프

### 01. 그래프 표현 방식 - 인접 행렬

- 인접 행렬 정의

  - adjacency matrix
  - |V| x |V| 크기의 행렬, 즉 2차원 배열을 이용해 그래프의 간선 정보를 저장한 것이다.
  - 한 정점에서 다른 모든 정점과의 간선 정보를 2차원 배열 내 각 원소에 저장하는 방식으로 쉽고 간단한 방법이다.

- 특징

  - [장점] 두 정점을 연결하는 간선의 존재 여부를 O(1) 시간 안에 즉시 알 수 있다. 즉, 정점 u 와 정점 v 를 연결하는 간선이 있는지를 알려면 M[u][v]의 값을 조사하면 된다.
  - [장점] 정점의 차수는 인접 행렬의 행이나 열을 조사하면 O(n) 만큼의 연산으로 알 수 있다.
  - [단점] n 개의 정점을 가지는 그래프를 인접 행렬로 표현하기 위해서는 간선의 수와 무관하게 항상 n^2 개의 메모리 공간이 필요하다.

- 구현

  ```javascript
  // 무방향 그래프
  const v = [1, 2, 3, 4];
  const e = [
  	[1, 2],
  	[2, 3],
  	[2, 4],
  	[3, 4],
  ];

  // 편의를 위해 1 증가 (정점의 순번을 1 부터 시작)
  const matrix = Array.from({length: v.length + 1}, () =>
  	Array(v.length + 1).fill(0)
  );

  // 간선이 존재하는 경우 양쪽 모두 표시(1)를 해준다.
  for (let i = 0; i < e.length; i++) {
  	matrix[e[i][0]][e[i][1]] = matrix[e[i][1]][e[i][0]] = 1;
  }

  // 출력
  console.log(matrix);
  [
  	[0, 0, 0, 0, 0],
  	[0, 0, 1, 0, 0],
  	[0, 1, 0, 1, 1],
  	[0, 0, 1, 0, 1],
  	[0, 0, 1, 1, 0],
  ];
  ```

### 02. 그래프 표현 방식 - 인접 리스트

- 인접 리스트 정의

  - 그래프의 각 정점마다 해당 정점에서 나가는 간선의 목록을 저장해서 표현한 것이다.
  - 따라서 그래프는 각 정점마다 하나의 연결리스트를 갖는 방식으로 구현된다.

- 특징

  - 정점의 수가 n 개이고, 간선의 수가 e 개인 무방향 그래프를 표현하기 위해서는 n 연결 리스트가 필요하고, n 개의 헤더 노드와 2e 개의 노드가 필요하다.
  - [단점] 간선(i, j)의 존재 여부나 정점 i 의 차수를 알기 위해서는 정점 i 의 연결 리스트에 있는 노드의 수만큼 탐색을 해야 한다. 즉, 정점 차수 만큼의 시간이 필요하다.

- 구현

  ```javascript
  // 무방향 그래프
  const v = [1, 2, 3, 4];
  const e = [
  	[1, 2],
  	[2, 3],
  	[2, 4],
  	[3, 4],
  ];

  // 편의를 위해 1 증가 (정점의 순번을 1 부터 시작)
  const list = Array.from({length: v.length + 1}, () => []);

  // 간선이 존재하는 경우 양쪽 모두 표시를 해준다.
  for (let i = 0; i < e.length; i++) {
  	const from = e[i][0];
  	const to = e[i][1];

  	list[from].push(to);
  	list[to].push(from);
  }

  // 출력
  console.log(list);
  [[], [2], [1, 3, 4], [2, 4], [3, 2]];
  ```

### 03. 인접 행렬과 인접 리스트 비교

- 비교

  - 한 방식의 단점이 바로 다른 방식의 장점이기 때문에 구현하려는 알고리즘의 종류나 그래프의 종류에 따라 적절히 선택해 사용해야 한다.
  - 인접 행렬 표현의 가장 큰 장점은 정점의 번호 u, v 가 주어졌을 때, 두 정점을 잇는 간선의 존재 여부를 한 번의 배열 접근만으로 확인할 수 있다는 것이다.
  - 반면 인접 리스트 표현의 경우, 간선 (u, v)의 존재 여부를 확인하기 위해 연결리스트를 처음부터 읽어가며 일일이 확인해야 한다.
  - 또한 인접 행렬 표현은 |V| x |V| 크기의 2차원 배열을 사용하기 때문에 간선의 개수와 관계없이 항상 O(|V|^2) 크기의 공간을 사용한다는 문제점이 있다.
  - 반면 인접 리스트 표현의 경우 |V| 개의 연결 리스트에 실제 간선 수 만큼의 원소가 들어 있으므로 O(|V| + |E|) 크기의 공간만 사용한다는 장점이 있다.

